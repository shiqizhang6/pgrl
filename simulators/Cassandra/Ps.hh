// $Id: makeOptionsFromDefines.hh.template,v 1.4 2004/06/01 01:23:29 daa Exp $ 
// Automatically generated by makeOptionsFromDefines. Do not edit directly.

class Ps {

 private:

    typedef enum OptionTypeEnum { 
	PsBool,
	PsDouble, 
	PsInt, 	
	PsString 
    } OptionType;

    typedef struct OptionReflectStruct {
	char* name;
	char* help;  // Info about this variable
	OptionType type; 
	void* val;   // Pointer to variable in this class;
    } OptionReflect;

    static OptionReflect reflections[];

 public:

    // List of parameters and extra info.
    static int numOptions;
    static char* pMODE;
    static char* pPARAM_FILE;
    static char* pPROBLEM_FILE;
    static double pPENALTY;
    static double pSTEP_SIZE;
    static int pSTEPS_PER_EPOCH;
    static int pMAX_STEPS;
    static int pMAX_TIME;
    static int pHIDDEN;
    static double pMAX_RAND_PARAM;
    static double pTD_DISCOUNT;
    static double pPSR_STEP_SIZE;
    static int pMAX_HISTORY;
    static int pMAX_CORE_TESTS;
    static double pMIN_KAPPA_FOR_CORE;
    static int pPASSES_BEFORE_ADDCORES;
    static int pMEM_MAX_HISTORY;
    static int pHMM_MAX_HISTORY;
    static int pHMM_WINDOW;


    // Sets the value of an option by name. No type checking.
    // Quite slow. Use the static vals if name known. Note that there is 
    // no support for adding new variables, only changing the vals of
    // existing vars. Note in particular, if changing string val, the
    // previous string should be gotten first, and the memory asscociate
    // with it freed. setValFromString() does this for you.
    // INPUT : name of option
    // INPUT : void* val to set.
    // OUTPUT: true on success, false if no option of that name exists. 
    // OUTPUT: void* pointer to val, or NULL if no option found.
    static bool setVal(char* s, void* val);

    // Set the value of a parameter from the string representation of
    // the value. Takes care of freeing previous string memory if the
    // type is a string. Cannot be used to declare a new variable.
    // INPUT : name of option
    // INPUT : value of option
    // OUTPUT: true on success, false if no option of that name exists. 
    static bool setValFromChar(const char* s, const char* val);

    // Gets the value of an option by name. No type checking.
    // Quite slow. Use the static vals if name known.
    // INPUT : name of option
    // OUTPUT: void* pointer to val, or NULL if no option found.
    static void* getVal(char* s);

    // Generate options help.
    static void help();

    // Dump option values
    static void print(std::ostream& out);

    // Process command line args that may contain parameters.
    // INPUT: normal argv, argc from command line
    // OUTPUT: Current optind for processing remainder of options
    static int processOpts(int argc, char **argv);

    // Parse a file that contains options
    // INPUT : filename
    // OUTPUT: Number of options read successfully from file
    static int parseOptionsFile(char* fname);

};
// End of auto generated file
